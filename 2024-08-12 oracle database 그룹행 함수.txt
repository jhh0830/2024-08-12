--- < 그룹함수 > -----

/*
    N 개의 값을 읽어서 1개의 결과로 반환
    (하나의 그룹별로 함수 실행 후 결과 반환)
    집계 함수 라고도 부른다.
*/

-- 1. SUM(숫자타입컬럼명)
-- 해당 컬럼값들의 총 합계를 반환해주는 함수

-- 2. AVG(숫자타입컬럼명)
-- 해당 컬럼값들의 평균값을 구해서 반환

-- 3. MIN(ANY타입컬럼명)
-- 해당 컬럼값들 중 가장 작은 값 반환
--> MIN 함수의 동작 원리 : 오름차순으로 설정 후 가장 위의 값을 반환

-- 4. MAX(ANY타입컬럼명)
-- 해당 컬럼값들 중 가장 큰 값 반환
--> MAX 함수 동작원리 : 내림차순으로 설정 후 가장 위의 값을 반환

-- 5. COUNT(*/컬럼명/DISTINCT 컬럼명)
-- 조회된 행의 갯수를 세서 반환

-- COUNT (*)
-- : 조회 결과에 해당하는 모든 행의 갯수를 다 세서 반환

-- CONUT (컬럼명)
-- : 제시한 해당 컬럼값이 NULL 이 아닌 것만 행의 갯수를 세서 반환

-- CONUT (DISTINCT 컬럼명)
-- : 제시한 해당 컬럼값에 중복값이 있을 경우 하나로만 갯수 세서 반환
--   NULL 포함 X

--> 주의할점 : COUNT(*) 의 결과와 COUNT(컬럼명) 의 결과는
-- 해당 컬럼에 들어있는 값 중 NULL 이 하나도 없다면 항상 일치!!

 < GROUP BY 절 >
    
    그룹을 묶어줄 기준을 제시할 수 있는 구문
    해장 제시된 기준별로 그룹을 묶을 수 있음
    
    GROUP BY 절을 쓰지 않을 경우 무조건 1개의 그룹으로 다 묶임
    GROUP BY 절을 쓰게 되면 내가 제시한 기준에 대한 갯수별로 
    그룹이 각각 묶임

<각 SQL문의 실행절차 순서>            
-- 각 직급별 사원 수
SELECT JOB_CODE, COUNT(*) -- 3. SELECT 절
FROM EMPLOYEE -- 1. FROM 절
GROUP BY JOB_CODE -- 2. GROUP BY 절
ORDER BY JOB_CODE; -- 4. ORDER BY 절


< HAVING 절 >
    
    그룹에 대한 조건을 제사하고 싶을 때 사용 되는 구문
    즉, 그룹함수식이 포함된 조건식을 제시하는 용도!!

< SELCET 문의 표현법 및 실행 순서 >
    
    5. SELECT * / 조회하고자하는컬럼명 / 리터럴 / 산술연산식 / 함수식 AS "별칭"
   1.  FROM 조회하고자하는테이블명 / 가상테이블(DUAL) 
   2.  WHERE 조건식(그룹함수는 안됨)
   3.  GROUP BY 그룹기준에해당하는컬럼명 / 함수식
   4. HAVING 그룹함수식에대한조건식
   6. ORDER BY [정렬기준에해당하는컬럼명 / 별칭 / 컬럼순번] [ASC/ DESC (생략가능)][NULL FIRST / NULL LAST (생략가능)] 
    
< 집합 연산자 SET OPERATOR>
    
    여러 개의 SELECT 문을 가지고 하나의 쿼리문으로 만드는 연산자
    
    - UNION : 하집합
               
                  두 쿼리문을 수행한 결과값을 더한 후
                  중복되는 부분을 한번 뺸것(OR 의 의미)
                
    - INTERSECT : 교집합
              
                  두 쿼리문을 수행한 결과값의 중복된 결과값 부분 (AND의 의미)
    - UNION ALL : 합집합 결과에 교집합이 더해진 개념
                    두 쿼리문을 수행한 결과값을 무조건 더함,
                    즉, 합집합에서 중복 제거를 하지 않은 개념
                    (중복된 결과가 나타날 수 있음!!)
    
    - MINUS :     차집합
                  선행 쿼리문 결과값 빼기
                  후행 쿼리문 결과값의 결과


-- 1. UNION (합집합)
-- 두 쿼리문을 수행한 결과값을 더하지만 중복되는 결과는 한번만 조회

 2. UNION ALL
-- 여러개의 쿼리 결과를 무조건 더하는 연산자
-- (중복되는 결과가 여러개 들어갈 수 있음)

-- 3. INTERSECT (교집합)
-- 여러 쿼리문의 결과의 중복된 결과 부분을 한번만 조회

-- 4. MINUS (차집합)
-- 선행 쿼리 결과에 후행 쿼리 결과를 뺀 나머지

-- 굳이 MINUS 연산을 안써도 가능

예시)
-- 부서 코드가 D5 인 사원들 중 급여가 300만원 초과인 사원들만 제외하고 조회
-- 부서 코드가 D5 인 사원들 중 급여가 300만원 이하인 사원들만 조회
(굳이 차집합을 필요로하지않는다면 코드를 늘리면서 쓸필요가없기때문에 심지어 
차집합은S ELECT 문의 SELECT 절이 모두 일치해야 하는건 필수 고 
순서(큰몫에서 필요없는부분을 빼야하는 순서)까지 고려야하기 때문이다)

-- 집합연산자 사용 시 주의사항
-- 합치고자 하는 SELECT 문의 SELECT 절이 모두 일치해야함!!

 < JOIN >
    
    두 개 이상의 테이블에서
    데이터를 함께 "조회" 하고자 할 때 사용되는 구문
    조회 결과는 하나의 결과물 (RESULT SET) 으로 나옴
    
    * 관계형 데이터베이스에서는 
      "최소한" 의 데이터로 각가의 테이블에 데이터를 "쪼개서" 보관하고 있음
      > 데이터의 "중복" 을 최소화 하기 위해서 최대한 쪼개는것!!
        (정규화 작업)
      
    * 즉, JOIN 구문을 통해서 여러개의 테이블 간 "관계" 를 맺어서
      같이 조회해야 함!!
      단, 무작정 JOIN 을 해서 조회를 하는건 아니고
      테이블 간의 "연결고리" 에 해당하는 컬럼을 매칭시켜서 조회해야함!!
      (외래키) 

* JOIN 은 크게 "오라클 전용 구문" 과 "ANSI (미국국립표준협회) 구문"
      으로 문법이 나뉜다.

 오라클 전용 구문        |     ANSI 구문
======================================================================
               등가조인            |       내부조인
            (EQUAL JOIN)          |    (INNER JOIN)
-------------------------------------------------------------------------------
               포괄조인             |     외부조인  
             (LEFT JOIN)           |      (LEFT OUTER JOIN)
             (RIGHT JOIN)          |     (RIGHT OUTER JOIN)
                                   |       (FULL OUTER JOIN)
                                   |  => 오라클 전용구문에서는 불가
--------------------------------------------------------------------
            카테이산 곱              |           교차조인
        (CARTESIAN PRODUCT)        |          (CROSS JOIN)
--------------------------------------------------------------------------
                            자체조인 (SELF JOIN)
                            비등가조인 (NON EQUAL JOIN)

--> JOIN 을 통해서 "연결고리" 에 해당되는 컬럼을
-- 제대로 매칭시키면 마치 하나의 결과물로 조히 가능해짐!!

 1. 등가조인 (EQUAL JOIN) / 내부조인 (INNER JOIN)
    
    연결고리 컬럼값이 "일치" 하는 행들만 조인되서 조회하겠다.
    즉, 일치하지 않는 값들은 조회에서 제외하겠다.

-->> 오라클 전용 구문
--  FROM 절에 조회하고자 하는 테이블명들을 나열 (,로)
--  WHERE 절에 매칭시킬 컬럼명 (연결고리) 에 대한 조건 기술

--> 오류 발생
-- AMBIGUOUSLY : 애매모호한
-- 확실히 어떤 테이블의 컬럼명인지 다 명시해야 해결 가능!!

-- 방법1. 테이블명을 이용하는 방법
-- 테이블명.컬럼명

-- 방법2. 테이블에 별칭 부여 후 별칭을 이용하는 방법
-- (사실 테이블에도 별칭을 붙일 수 있음!!)
-- 별칭.컬럼명
-- > 등가 조인 / 내부 조인
-- : "일치" 하는 행들만 조회하는 개념
-- 일치하지 않는 행들은 애초에 조회되지 않음!!
